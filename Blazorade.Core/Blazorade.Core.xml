<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Blazorade.Core</name>
    </assembly>
    <members>
        <member name="T:Blazorade.Core.Components.BlazoradeComponentBase">
            <summary>
            A base class for Blazor components.
            </summary>
        </member>
        <member name="M:Blazorade.Core.Components.BlazoradeComponentBase.#ctor">
            <summary>
            Creates an instance of the class.
            </summary>
        </member>
        <member name="P:Blazorade.Core.Components.BlazoradeComponentBase.Attributes">
            <summary>
            A collection of attributes that will be merged onto the component when rendered.
            </summary>
        </member>
        <member name="P:Blazorade.Core.Components.BlazoradeComponentBase.ChildContent">
            <summary>
            Enables child content for the control.
            </summary>
        </member>
        <member name="P:Blazorade.Core.Components.BlazoradeComponentBase.Classes">
            <summary>
            Returns a read-only copy of the classes defined on the component. 
            </summary>
        </member>
        <member name="P:Blazorade.Core.Components.BlazoradeComponentBase.Styles">
            <summary>
            Returns a read-only copy of the inline styles defined on the component.
            </summary>
        </member>
        <member name="M:Blazorade.Core.Components.BlazoradeComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <summary>
            Prepares the component for parameters.
            </summary>
        </member>
        <member name="M:Blazorade.Core.Components.BlazoradeComponentBase.AddAttribute(System.String,System.Object)">
            <summary>
            Adds an attribute to the <see cref="!:this.Attributes"/> dictionary.
            </summary>
            <param name="name">The name of the attribute to add.</param>
            <param name="value">The value of the attribute.</param>
            <returns>Returns the component instance.</returns>
        </member>
        <member name="M:Blazorade.Core.Components.BlazoradeComponentBase.AddClasses(System.String[])">
            <summary>
            Adds the given classes to the <see cref="P:Blazorade.Core.Components.BlazoradeComponentBase.Classes"/> collection.
            </summary>
            <param name="classNames">An array of class names to add.</param>
            <returns>Returns the component instance.</returns>
        </member>
        <member name="M:Blazorade.Core.Components.BlazoradeComponentBase.AddStyle(System.String,System.String)">
            <summary>
            Adds a style to the style dictionary. The style dictionary will be rendered as an inline <c>style</c> attribute on the resulting element.
            </summary>
            <param name="styleName">The name of the style.</param>
            <param name="value">The value of the style.</param>
            <returns>Returns the component instance.</returns>
        </member>
        <member name="M:Blazorade.Core.Components.BlazoradeComponentBase.OnParametersSet">
            <summary>
            Handles builders set on the component.
            </summary>
            <remarks>
            If you override this method, you must call the base implementation at some point in your implementation.
            </remarks>
        </member>
        <member name="M:Blazorade.Core.Components.BlazoradeComponentBase.RemoveAttribute(System.String)">
            <summary>
            Removes the attribute with the given name.
            </summary>
            <param name="name">The name of the attribute to remove.</param>
            <returns>Returns the component instance.</returns>
        </member>
        <member name="M:Blazorade.Core.Components.BlazoradeComponentBase.RemoveClass(System.String)">
            <summary>
            Removes the given class from the <see cref="P:Blazorade.Core.Components.BlazoradeComponentBase.Classes"/> collection.
            </summary>
            <param name="className">The class name to remove.</param>
            <returns>Returns the component instance.</returns>
        </member>
        <member name="M:Blazorade.Core.Components.BlazoradeComponentBase.RemoveStyle(System.String)">
            <summary>
            Removes the given style from the styles dictionary.
            </summary>
            <param name="styleName">The style to remove.</param>
            <returns>Returns the component instance.</returns>
        </member>
        <member name="T:Blazorade.Core.Components.Builder.ComponentBuilder">
            <summary>
            A generic component builder.
            </summary>
        </member>
        <member name="M:Blazorade.Core.Components.Builder.ComponentBuilder.#ctor">
            <summary>
            Creates an instance of the builder.
            </summary>
        </member>
        <member name="M:Blazorade.Core.Components.Builder.ComponentBuilder.#ctor(Blazorade.Core.Components.Builder.IComponentBuilder)">
            <summary>
            Creates an instance of the builder from the given builder.
            </summary>
            <param name="builder">The builder to start the new instance from.</param>
        </member>
        <member name="M:Blazorade.Core.Components.Builder.ComponentBuilder.BuildAttributes">
            <summary>
            Returns the attributes from the builder.
            </summary>
        </member>
        <member name="M:Blazorade.Core.Components.Builder.ComponentBuilder.BuildClasses">
            <summary>
            Returns the classes from the builder.
            </summary>
        </member>
        <member name="M:Blazorade.Core.Components.Builder.ComponentBuilder.BuildStyles">
            <summary>
            Returns the styles from the builder.
            </summary>
        </member>
        <member name="M:Blazorade.Core.Components.Builder.ComponentBuilder.AddAttribute(System.String,System.Object)">
            <summary>
            Adds an attribute to the builder.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
            <remarks>
            If the attribute already exists, it will be overwritten.
            </remarks>
        </member>
        <member name="M:Blazorade.Core.Components.Builder.ComponentBuilder.AddAttributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Adds multiple attributes to the builder.
            </summary>
            <param name="attributes">A dictionary representing the attributes to add.</param>
        </member>
        <member name="M:Blazorade.Core.Components.Builder.ComponentBuilder.AddClasses(System.String[])">
            <summary>
            Adds the given classes to the builder.
            </summary>
            <param name="classes">The classes to add. Duplicates and classes that already exist are ignored.</param>
        </member>
        <member name="M:Blazorade.Core.Components.Builder.ComponentBuilder.AddStyle(System.String,System.String)">
            <summary>
            Adds a CSS style to the builder.
            </summary>
            <param name="name">The name of the style.</param>
            <param name="value">The value of the style.</param>
            <remarks>
            If the style already exists, it will be overwritten.
            </remarks>
        </member>
        <member name="M:Blazorade.Core.Components.Builder.ComponentBuilder.AddStyles(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Adds multiple styles to the builder.
            </summary>
            <param name="styles">A dictionary representing the styles to add.</param>
        </member>
        <member name="M:Blazorade.Core.Components.Builder.ComponentBuilder.RemoveAttribute(System.String)">
            <summary>
            Removes the given attribute from the builder.
            </summary>
            <param name="name">The name of the attribute to remove.</param>
            <remarks>If the attribute does not exist, the call will be ignored.</remarks>
        </member>
        <member name="M:Blazorade.Core.Components.Builder.ComponentBuilder.RemoveClasses(System.String[])">
            <summary>
            Removes the given classes from the builder.
            </summary>
            <param name="classes">The classes to remove.</param>
            <remarks>If a class does not exist, it will be ignored.</remarks>
        </member>
        <member name="M:Blazorade.Core.Components.Builder.ComponentBuilder.RemoveStyle(System.String)">
            <summary>
            Removes the given style from the builder.
            </summary>
            <param name="name">The name of the style to remove.</param>
            <remarks>If the style does not exist, it is ignored.</remarks>
        </member>
        <member name="T:Blazorade.Core.Components.Builder.IComponentBuilder">
            <summary>
            The interface that defines a component builder.
            </summary>
        </member>
        <member name="M:Blazorade.Core.Components.Builder.IComponentBuilder.BuildAttributes">
            <summary>
            Returns the attributes from the builder.
            </summary>
        </member>
        <member name="M:Blazorade.Core.Components.Builder.IComponentBuilder.BuildClasses">
            <summary>
            Returns the classes from the builder.
            </summary>
        </member>
        <member name="M:Blazorade.Core.Components.Builder.IComponentBuilder.BuildStyles">
            <summary>
            Returns the styles from the builder.
            </summary>
        </member>
        <member name="T:Blazorade.Core.Components.Redirect">
            <summary>
            Allows you to redirect the user to another address.
            </summary>
            <remarks>
            This component handles the redirection when it is rendered. No redirection will occur if your
            application logic does not render this component.
            </remarks>
        </member>
        <member name="P:Blazorade.Core.Components.Redirect.Delay">
            <summary>
            A delay in milliseconds before redirecting to the specified <c>URL</c>.
            </summary>
        </member>
        <member name="P:Blazorade.Core.Components.Redirect.Url">
            <summary>
            The URL to redirect to when the component has rendered.
            </summary>
        </member>
        <member name="P:Blazorade.Core.Components.Redirect.NavigationManager">
            <summary>
            The navigation manager used by the component. This is automatically injected.
            </summary>
        </member>
        <member name="M:Blazorade.Core.Components.Redirect.OnAfterRenderAsync(System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="T:Blazorade.Core.Components.Server.ComponentReconnectModal">
            <summary>
            Represents a modal dialog that is shown when the application looses connection with the server.
            </summary>
        </member>
        <member name="M:Blazorade.Core.Components.Server.ComponentReconnectModal.#ctor">
            <summary>
            </summary>
        </member>
        <member name="P:Blazorade.Core.Components.Server.ComponentReconnectModal.BackdropBackgroundColor">
            <summary>
            The colour of the modal dialog backdrop. Defaults to <c>rgba(0, 0, 0, .75)</c>.
            </summary>
        </member>
        <member name="P:Blazorade.Core.Components.Server.ComponentReconnectModal.ConnectionStateBackgroundColor">
            <summary>
            The background colour of the dialog displaying the connection state. Defaults to <c>rgba(255, 255, 255, .8)</c>.
            </summary>
        </member>
        <member name="P:Blazorade.Core.Components.Server.ComponentReconnectModal.ConnectionStatePadding">
            <summary>
            The padding for the modal displaying the connection state. Default to <c>64px</c>.
            </summary>
        </member>
        <member name="P:Blazorade.Core.Components.Server.ComponentReconnectModal.ReconnectingTemplate">
            <summary>
            Allows you to customize the message that is shown when the connection is lost and the application is trying to reconnect.
            </summary>
        </member>
        <member name="P:Blazorade.Core.Components.Server.ComponentReconnectModal.ReconnectFailedTemplate">
            <summary>
            Allows you to customize the message that is shown when reconnection attempts with the server have failed.
            </summary>
        </member>
        <member name="P:Blazorade.Core.Components.Server.ComponentReconnectModal.ReconnectRejectedTemplate">
            <summary>
            Allows you to customize the message that is shown when the server has rejected the reconnection.
            </summary>
        </member>
        <member name="M:Blazorade.Core.Components.Server.ComponentReconnectModal.OnParametersSet">
            <summary>
            </summary>
        </member>
        <member name="T:Blazorade.Core.Interop.DotNetInstanceCallbackArgs">
            <summary>
            An arguments class for use when calling a JavaScript function from .NET, where the JavaScript function
            needs to call back to your .NET code.
            </summary>
            <remarks>
            This is useful in scenarios where the JavaScript function that you call from .NET calls into some JavaScript
            API that returns a result using callback functions.
            </remarks>
        </member>
        <member name="T:Blazorade.Core.Interop.DotNetInstanceMethod">
            <summary>
            Encapsulates a .NET instance method in your Blazor application that can be called from JavaScript.
            </summary>
            <remarks>
            <para>
            An instance of this class can be used as argument when calling a JavaScript function from .NET. The argument allows
            the JS code to call the .NET method encapsulated in this instance.
            </para>
            <para>
            To call the method encapsulated in this instance from your JavaScript code, you pass this instance to your JavaScript
            code as an argument. In that JavaScript function you would then use it like this.
            </para>
            <code>
            function myJavaScriptFunction(dotNetInstanceMethod) {
                
                // To call the .NET method without any arguments, you do it like this.
                dotNetInstanceMethod.target.invokeMethodAsync(dotNetInstanceCallback.methodName);
                
                // Or you can also pass in arguments like this.
                dotNetInstanceMethod.target.invokeMethodAsync(dotNetInstanceMethod.methodName, arg1, arg2);
            }
            </code>
            </remarks>
        </member>
        <member name="P:Blazorade.Core.Interop.DotNetInstanceMethod.Target">
            <summary>
            Represents the target object defining the method to call back from JavaScript.
            </summary>
        </member>
        <member name="P:Blazorade.Core.Interop.DotNetInstanceMethod.MethodName">
            <summary>
            The name of the method on the object represented by <see cref="P:Blazorade.Core.Interop.DotNetInstanceMethod.Target"/>.
            </summary>
        </member>
        <member name="M:Blazorade.Core.Interop.DotNetInstanceMethod.Create(System.Delegate)">
            <summary>
            Creates a new instance from the delegate specified in <paramref name="method"/>.
            </summary>
            <param name="method">The method to encapsulate in the callback.</param>
        </member>
        <member name="M:Blazorade.Core.Interop.DotNetInstanceMethod.Create(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Creates a new instance from the async function specified in <paramref name="method"/>.
            </summary>
            <param name="method">The method to encapsulate in the callback.</param>
            <returns></returns>
        </member>
        <member name="M:Blazorade.Core.Interop.DotNetInstanceMethod.Create``1(System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Creates a new instance from the async function specified in <paramref name="method"/>.
            </summary>
            <typeparam name="T">The type for the input parameter on the callback method.</typeparam>
            <param name="method">The method to encapsulate in the callback.</param>
        </member>
        <member name="M:Blazorade.Core.Interop.DotNetInstanceMethod.Dispose">
            <summary>
            Disposes of the object.
            </summary>
        </member>
    </members>
</doc>
